<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000</depth>
  <persistent>0</persistent>
  <parentName>obj_character</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init AI
event_inherited();
scr_init_ai();
scr_set_vocal_0();
scr_costume_guard();
scr_not_solid();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
with obj_bleed
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_ai_update_state();
alarm[0]      = reaction_time;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///controll and perform
var enemy_attacking = false;
//key_left        = keyboard_check(ord('Z'));
//key_right       = keyboard_check(ord('C'));


if (target != 0) {
    var t = false
    with target {
        t = scr_is_dead();
    }
    if t {
        target    = 0;
        key_right = false;
        key_left  = false;
    }
    with target {
        enemy_attacking = scr_is_attacking();
    }
}

if stance != DASH
    move_dir = STAND;


if hhealth &lt;= 0
    stance  = DEAD;
if stance = RUNWALK {
    scr_generate_walk();
    if (target != 0) {
        if (x &gt; target.x) {
            image_xscale  = -1;
        } else {
            image_xscale  = 1;
        }
        var enemy_far   = false;
        var enemy_close = false;
        if abs(x - target.x) &gt; 400 {
            enemy_far   = true;
            enemy_close = false;
        } else {
            enemy_far   = false;
            enemy_close = true;
        }
    } else {
        walking = true;
        if (x &lt; room_width - 800) {
            if move_dir = 0 {
                key_right = true;
                key_left  = false;
            }
        }
        if (x &gt;= room_width - 800) {
            key_right = false;
            key_left  = true;
        }
        if (x &lt; 800) {
            key_right = true;
            key_left  = false;
        }
        
    }
    if (pushed) {
        stance  = PUSHED;
    }
    if (wound) {
        stance  = WOUND;
        wound   = false;
    }
    if cutscene 
        stance = CUTSCENE;
}
if stance = WOUND {
    h_wound          = true;
    timeline_index   = 0;
    timeline_running = false;
    scr_current_anim("wound");
}
if stance = PUSHED {
    timeline_index   = 0;
    timeline_running = false;
    scr_current_anim(pushed_anim);
    if attack_mask != 0
        scr_end_attack();
}
if stance = PARRIED {
    timeline_index   = 0;
    timeline_running = false;
    if attack_mask != 0
        scr_end_attack();
    scr_current_anim("blocked");
}
if stance = DEAD {
    if !ragdoll {
        ragdoll = true;
        scr_ragdoll_enable();
        var t = 1
        if obj_player.x &gt; x
            t = -1;
        if cutscene
            t = 1;
        with part_torso {
            physics_apply_force(x,y, t * 350000, -200000);
        }
        timeline_index   = 0;
        timeline_running = false;
        if attack_mask != 0 {
            with attack_mask {
                instance_destroy();
            }
        }
    }
}
if (stance = CUTSCENE) {
    if (cutscene = false)
        stance = RUNWALK;
}
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
