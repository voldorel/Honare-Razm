<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000</depth>
  <persistent>0</persistent>
  <parentName>obj_character</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init pose and vars
event_inherited();
scr_init_gear();
scr_set_vocal_0();


key_right       = false;
key_left        = false;
key_attack      = false;
key_debug_dead  = false;
key_walk        = false;
key_dash_left   = false;
key_dash_right  = false;
key_parry       = false;
key_kick        = false;
key_interact    = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ragdoll
    scr_ragdoll_destroy();

if attack_mask != 0
    with (attack_mask)
        instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement and stances



key_right       = keyboard_check(ord('D'));
key_left        = keyboard_check(ord('A'));
key_attack      = keyboard_check(ord('J'));
//key_debug_dead  = keyboard_check_pressed(ord('O'));
key_walk        = keyboard_check_pressed(vk_shift);
key_dash_left   = keyboard_check(ord('Q'));
key_dash_right  = keyboard_check(ord('E'));
key_parry       = keyboard_check(ord('K'));
key_kick        = keyboard_check(ord('L'));
key_interact    = keyboard_check_pressed(ord('F'));



if stance != DASH
    move_dir = STAND;

if key_walk {
    walking = 1 - walking;
}
if hhealth &lt;= 0
    stance = DEAD;

scr_check_interaction();

if stance = RUNWALK {
    parry = false;
    scr_generate_walk();
    if key_attack {
        stance = ATTACKING;
        if move_dir = STAND
            h_speed = 0;
    }
    if key_dash_left {
        move_dir = LEFT;
        stance   = DASH;
    }
    if key_dash_right {
        move_dir = RIGHT;
        stance   = DASH;
    }
    if key_parry {
        stance   = PARRY;
    }
    if key_kick {
        stance   = KICK;
    }
    if (pushed) {
        stance  = PUSHED;
    }
    if (wound) {
        stance   = WOUND;
        wound    = false;
    }
    if (key_interact) {
        if (can_interact) {
            scr_use_door();
        }
    }
    if cutscene 
        stance = CUTSCENE;
}
if stance = ATTACKING {
    if (pushed) {
        stance  = PUSHED;
    }
    if (wound) {
        stance  = WOUND;
        wound   = false;
    }
    if blocked {
        stance  = PARRIED;
        h_speed = 0;
    } else {
        if current_anim != current_attack_anim {
            var ind             =  irandom_range(0, array_length_1d(mainhand.attack_anim) - 1);
            scr_current_anim(mainhand.attack_anim[ind]);
            current_attack_anim = current_anim;
            timeline_index      = mainhand.attack_guide[ind];
        }
        scr_start_timeline();
    }
}
if stance = DEAD {
    if !ragdoll {
        ragdoll = true;
        scr_ragdoll_enable();
        var t = 1
        if obj_player.x &gt; x
            t = -1;
        with part_torso {
            physics_apply_force(x,y, t * 350000, -200000);
        }
        timeline_index   = 0;
        timeline_running = false;
        if attack_mask != 0 {
            with attack_mask {
                instance_destroy();
            }
        }
    }
}

if (stance = DASH) {
    scr_current_anim(dash_anim);
    var t = 1;
    image_xscale = 1;
    if move_dir = LEFT {
        t = -1;
        image_xscale = -1;
    }
    if (abs(h_speed) &lt; 20) {
        h_speed += t*4;
    } else {
        if move_dir = RIGHT
            h_speed = 20;
        else 
            h_speed = -20;
    }
        
}

if stance = WOUND {
    parry           = false;
    scr_current_anim("wound");
    if attack_mask != 0
        scr_end_attack();
    timeline_index   = 0;
    timeline_running = false;
}


if stance = PARRIED {
    pushed           = false;
    scr_current_anim("blocked");
    if attack_mask != 0
        scr_end_attack();
    timeline_index   = 0;
    timeline_running = false;
}
if stance = PUSHED {
    timeline_index   = 0;
    timeline_running = false;
    scr_current_anim(pushed_anim);
    if attack_mask != 0
        scr_end_attack();
}



if key_debug_dead {//the only debugging code ... don't worry
    stance = DEAD;
}

if stance = PARRY {
    pushed = false;
    if (wound) {
        if  (!parry) {
            stance   = WOUND;
            wound    = false;
        }
    }
    scr_current_anim(mainhand.parry_anim);
    if current_anim != current_attack_anim {
        var anim_           = mainhand.parry_anim;
        scr_current_anim(anim_);
        current_attack_anim = current_anim;
        timeline_index      = mainhand.parry_guide;
    }
    scr_start_timeline();
}
if stance = KICK {
    if (wound) {
        stance   = WOUND;
    }
    scr_current_anim(mainhand.kick_anim);
    if current_anim != current_attack_anim {
        var anim_           = mainhand.kick_anim;
        scr_current_anim(anim_);
        current_attack_anim = current_anim;
        timeline_index      = mainhand.kick_guide;
    }
    scr_start_timeline();
}
if (stance = CUTSCENE) {
    if (cutscene = false)
        stance = RUNWALK;
}


event_inherited();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
