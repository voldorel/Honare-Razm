<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_room_controller</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
viewSurface = -1 //Initialize the viewSurface variable

cloud_x = 0;


music_lowintense  = snd_demo_low_intensity;
music_highintense = snd_demo_high_intensity;
intense           = false;
level_music       = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///adjust background layers
event_inherited();
if intense {
    if (!audio_is_playing(music_highintense)) {
        audio_stop_sound(level_music);
        level_music = scr_play_music(music_highintense);
    }
} else {
    if (level_music = 0)
        level_music = scr_play_music(music_lowintense);
    if (level_music)
    if instance_exists(obj_bleed)
        intense = true;
}
with (obj_soldier) {
    if (!scr_is_dead()) {
        var t = id;
        if (x &gt; view_xview[0] + 400) {
            if (x &lt; view_xview[0] + view_wview[0] - 400) {
                if target = 0
                    target = obj_player;
                if obj_player.target = 0
                    obj_player.target = t;
            }
        }
    }
}

scr_check_to_finish();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*///draw watermark later GUI
//You can modify these variables
hRate = 0.75 //Basically the y-coordinate of the top of the water, where 0 is the top of the screen and 1 is the bottom.
waveIntensity = 20 //Controls the number of waves


//Don't modify this unless you know what you're doing

surface_set_target(viewSurface);
var t = 1920 / view_wport[0];
draw_surface_ext(application_surface, 0, 0, 1, 1, 0, c_white, 1);
draw_background_ext(bg_fg_lake, 0, view_hport[0] * 0.49, 1, 1, 0, c_white, 0.6);
surface_reset_target();


texture_set_repeat(true)
surface_set_target(application_surface);
shader_set(sh_water)
shader_set_uniform_f(shader_get_uniform(sh_water, "time"), current_time / 200)
shader_set_uniform_f(shader_get_uniform(sh_water, "hRate"), hRate)
shader_set_uniform_f(shader_get_uniform(sh_water, "waveIntensity"), waveIntensity)
draw_set_color(c_white)
draw_primitive_begin_texture(pr_trianglestrip, surface_get_texture(viewSurface))
draw_vertex_texture(0, view_hport[0] * hRate, 0, 0)
draw_vertex_texture(view_wport[0], view_hport[0] * hRate, 1, 0)
draw_vertex_texture(0, view_hport[0], 0, 1)
draw_vertex_texture(view_wport[0], view_hport[0], 1, 1)
draw_primitive_end()
shader_reset()
surface_reset_target();
draw_surface_ext(application_surface, 0, 0, t, t, 0, -1, 1);
event_inherited();

*/
///draw watermark later GUI
//You can modify these variables
hRate = 0.75 //Basically the y-coordinate of the top of the water, where 0 is the top of the screen and 1 is the bottom.
waveIntensity = 20 //Controls the number of waves


//Don't modify this unless you know what you're doing

surface_set_target(viewSurface);
var t = 1920 / view_wport[0];
draw_surface_ext(application_surface, 0, 0, 1, 1, 0, c_white, 1);
var hh = background_get_height(bg_fg_lake);
draw_background_ext(bg_fg_lake, 0, view_hport[0] * 0.29 + hh, 1, -1, 0, c_white, 0.6);
surface_reset_target();


texture_set_repeat(true)
surface_set_target(application_surface);
shader_set(sh_water);
var time = (current_time / 200) % 70 + 350;
shader_set_uniform_f(shader_get_uniform(sh_water, "time"), time);
shader_set_uniform_f(shader_get_uniform(sh_water, "hRate"), hRate)
shader_set_uniform_f(shader_get_uniform(sh_water, "waveIntensity"), waveIntensity)
draw_set_color(c_white)
var tex = surface_get_texture(viewSurface);
draw_primitive_begin_texture(pr_trianglestrip, tex)
draw_vertex_texture(0, view_hport[0] * hRate, 0, 0)
draw_vertex_texture(view_wport[0], view_hport[0] * hRate, 1, 0)
draw_vertex_texture(0, view_hport[0], 0, 1)
draw_vertex_texture(view_wport[0], view_hport[0], 1, 1)
draw_primitive_end()
shader_reset()
surface_reset_target();
draw_surface_ext(application_surface, 0, view_hview[0] * 2, 2.3, -(t + 0.6), 0, c_white, 1);
draw_surface_part_ext(application_surface, 0, 0, view_wport[0], view_hport[0] * hRate, 0, 0, t, t, c_white, 1);
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check surface

//It's necessary to check if a surface still exists every step
if !surface_exists(viewSurface)
{
    viewSurface = surface_create(view_wport[0], view_hport[0]);
}

//Set the view surface
view_surface_id[0] = application_surface;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
